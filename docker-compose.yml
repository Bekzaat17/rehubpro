version: "3.9"

services:
  db:
    image: postgres:15
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    networks:
      - backend

  redis:
    image: redis:7
    restart: always
    networks:
      - backend

  migrator:
    build:
      context: .
      dockerfile: docker/django/Dockerfile
    entrypoint: ["sh", "-c", "python manage.py migrate"]
    volumes:
      - .:/app
    env_file: .env
    depends_on:
      - db
    networks:
      - backend
    container_name: migrator

  web:
    build:
      context: .
      dockerfile: docker/django/Dockerfile
    entrypoint: ["sh", "docker/entrypoint.sh"]
    command: daphne -b 0.0.0.0 -p 8000 config.asgi:application
    volumes:
      - .:/app
      - media_volume:/vol/web/media
      - static_volume:/vol/web/static
    env_file: .env
    environment:
      - SERVICE_NAME=web
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - migrator
    networks:
      - backend
    container_name: web

  celery:
    build:
      context: .
      dockerfile: docker/django/Dockerfile
    entrypoint: ["sh", "-c", "docker/wait_for_migrations.sh && celery -A config worker --loglevel=info"]
    volumes:
      - .:/app
    env_file: .env
    depends_on:
      - db
      - redis
      - migrator
    networks:
      - backend
    container_name: celery

  celery-beat:
    build:
      context: .
      dockerfile: docker/django/Dockerfile
    entrypoint: ["sh", "-c", "docker/wait_for_migrations.sh && celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler"]
    volumes:
      - .:/app
    env_file: .env
    depends_on:
      - db
      - redis
      - migrator
    networks:
      - backend
    container_name: celery-beat

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/certs:/etc/ssl:ro
      - static_volume:/vol/web/static:ro
      - media_volume:/vol/web/media:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web
    networks:
      - backend

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  backend: