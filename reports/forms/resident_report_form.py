from django import forms

from references.models import (
    EmotionalState, PhysicalState, Motivation, DailyDynamics,
    MrpActivity, FamilyActivity, CharacterTrait
)
from references.models.character_trait import TraitType


class ResidentReportForm(forms.Form):
    """
    –§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –ø–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç—É.
    –ù–ï ModelForm, —Ç–∞–∫ –∫–∞–∫ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º –∏ —Ä–æ–ª—è–º.
    """

    emotional_state = forms.ModelChoiceField(queryset=EmotionalState.objects.all())
    physical_state = forms.ModelChoiceField(queryset=PhysicalState.objects.all())
    motivation = forms.ModelChoiceField(queryset=Motivation.objects.all())
    daily_dynamics = forms.ModelChoiceField(queryset=DailyDynamics.objects.all())

    positive_traits = forms.ModelMultipleChoiceField(
        queryset=CharacterTrait.objects.all(),
        required=False,
        widget=forms.CheckboxSelectMultiple
    )
    negative_traits = forms.ModelMultipleChoiceField(
        queryset=CharacterTrait.objects.all(),
        required=False,
        widget=forms.CheckboxSelectMultiple
    )

    mrp_activity = forms.ModelChoiceField(queryset=MrpActivity.objects.all(), required=False)
    family_activity = forms.ModelChoiceField(queryset=FamilyActivity.objects.all(), required=False)

    comment = forms.CharField(widget=forms.Textarea(attrs={"rows": 3, "class": "form-control"}), required=False)

    def __init__(self, *args, resident=None, date=None, **kwargs):
        super().__init__(*args, **kwargs)
        self.resident = resident
        self.date = date
        self.task_comments = {}      # {task_id: comment}
        self.role_statuses = {}      # {role_id: status}
        self._init_dynamic_fields()

        # --- –£–°–¢–° ---
        self.fields["usts_info_shared"] = forms.ChoiceField(
            label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–¥–∞—ë—Ç –£–°–¢–°:",
            choices=[
                ("true", "–†–æ–≤–Ω–æ"),
                ("false", "–ù–µ —Ä–æ–≤–Ω–æ"),
            ],
            widget=forms.RadioSelect,
            required=False
        )

        self.fields["usts_format_followed"] = forms.ChoiceField(
            label="–ò–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç –£–°–¢–°:",
            choices=[
                ("true", "–ò–º–µ–µ—Ç"),
                ("false", "–ù–µ –∏–º–µ–µ—Ç"),
            ],
            widget=forms.RadioSelect,
            required=False
        )

        self.fields["usts_comment"] = forms.CharField(
            label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –£–°–¢–°",
            required=False,
            widget=forms.Textarea(attrs={"class": "form-control", "rows": 3})
        )

        # üëâ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–æ —Ç–∏–ø—É
        self.fields["positive_traits"].queryset = CharacterTrait.objects.filter(type=TraitType.STRENGTH)
        self.fields["negative_traits"].queryset = CharacterTrait.objects.filter(type=TraitType.DEFECT)

        # üè∑Ô∏è –ß–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
        self.fields["emotional_state"].label = "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
        self.fields["physical_state"].label = "–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
        self.fields["motivation"].label = "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"
        self.fields["daily_dynamics"].label = "–î–∏–Ω–∞–º–∏–∫–∞"
        self.fields["mrp_activity"].label = "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –ú–†–ü"
        self.fields["family_activity"].label = "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–µ–º—å–µ"
        self.fields["comment"].label = "–û–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        self.fields["positive_traits"].label = "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã"
        self.fields["negative_traits"].label = "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã"

    def _init_dynamic_fields(self):
        """
        –ü–æ–¥–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ —Ä–æ–ª–∏ ‚Äî —Å–æ–∑–¥–∞—ë—Ç –ø–æ–ª—è –ø–æ –Ω–∏–º.
        """
        from tasks.models.assigned_task import AssignedTask
        from tasks.models.task_progress import TaskProgress
        from roles.models.resident_role_assignment import ResidentRoleAssignment

        # –ó–∞–¥–∞—á–∏ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–∏–º)
        active_tasks = AssignedTask.objects.filter(
            resident=self.resident,
            status__in=["writing", "submitting"]
        )
        for task in active_tasks:
            field_name = f"task_comment_{task.id}"
            self.fields[field_name] = forms.CharField(
                label=f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ: {task.task.title}",
                required=False,
                widget=forms.Textarea(attrs={"rows": 2})
            )

        # –†–æ–ª–∏ (–æ—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏)
        roles = ResidentRoleAssignment.objects.filter(
            resident=self.resident,
            assigned_at__lte=self.date
        ).filter(
            unassigned_at__isnull=True
        ) | ResidentRoleAssignment.objects.filter(
            resident=self.resident,
            assigned_at__lte=self.date,
            unassigned_at__gte=self.date
        )

        for role in roles:
            field_name = f"role_status_{role.id}"
            self.fields[field_name] = forms.ChoiceField(
                label=f"–§—É–Ω–∫—Ü–∏—è: {role.role.name}",
                choices=[
                    ("responsible", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"),
                    ("irresponsible", "–ë–µ–∑–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π")
                ],
                widget=forms.RadioSelect
            )

    def clean(self):
        cleaned_data = super().clean()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ bool
        for field in ["usts_info_shared", "usts_format_followed"]:
            value = cleaned_data.get(field)
            if value == "true":
                cleaned_data[field] = True
            elif value == "false":
                cleaned_data[field] = False
            else:
                cleaned_data[field] = None  # –ù–∞ —Å–ª—É—á–∞–π –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è

        # –°–æ–±–∏—Ä–∞–µ–º task_comments
        for name, value in self.cleaned_data.items():
            if name.startswith("task_comment_") and value.strip():
                task_id = int(name.split("_")[-1])
                self.task_comments[task_id] = value.strip()

        # –°–æ–±–∏—Ä–∞–µ–º role_statuses
        for name, value in self.cleaned_data.items():
            if name.startswith("role_status_"):
                role_id = name.split("_")[-1]
                self.role_statuses[role_id] = value

        return cleaned_data

    def save(self, created_by):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç —Ñ–∞–±—Ä–∏–∫—É –∏ —Å–æ–∑–¥–∞—ë—Ç –æ—Ç—á—ë—Ç.
        """
        from reports.services.report_factory import ReportFactory

        factory = ReportFactory(
            resident=self.resident,
            created_by=created_by,
            date=self.date
        )

        return factory.create_or_update_report(
            data=self.cleaned_data,
            task_comments=self.task_comments,
            role_statuses=self.role_statuses
        )