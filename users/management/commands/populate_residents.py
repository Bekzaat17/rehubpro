# users/management/commands/populate_demo_residents.py

from django.core.management.base import BaseCommand
from residents.models import Resident
from residents.enums import DependencyType, ResidentStatus
from datetime import date, timedelta
import random


class Command(BaseCommand):
    help = "–°–æ–∑–¥–∞—ë—Ç 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç)"

    def handle(self, *args, **kwargs):
        today = date.today()

        demo_residents = [
            {
                "first_name": "–ò–≤–∞–Ω",
                "last_name": "–ò–≤–∞–Ω–æ–≤",
                "middle_name": "–ò–≤–∞–Ω–æ–≤–∏—á",
                "identical_number": "test000001",
                "date_of_birth": date(1985, 5, 20),
                "dependency_type": DependencyType.F11,  # –ù–∞—Ä–∫–æ–º–∞–Ω
                "notes": "–ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç"
            },
            {
                "first_name": "–ü—ë—Ç—Ä",
                "last_name": "–ü–µ—Ç—Ä–æ–≤",
                "middle_name": "–ü–µ—Ç—Ä–æ–≤–∏—á",
                "identical_number": "test000002",
                "date_of_birth": date(1990, 3, 15),
                "dependency_type": DependencyType.F10,  # –ê–ª–∫–æ–≥–æ–ª–∏–∫
                "notes": "–í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç"
            },
            {
                "first_name": "–°–µ—Ä–≥–µ–π",
                "last_name": "–°–µ—Ä–≥–µ–µ–≤",
                "middle_name": "–°–µ—Ä–≥–µ–µ–≤–∏—á",
                "identical_number": "test000003",
                "date_of_birth": date(1992, 7, 10),
                "dependency_type": DependencyType.F63,  # –õ—É–¥–æ–º–∞–Ω
                "notes": "–¢—Ä–µ—Ç–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç"
            },
            {
                "first_name": "–ê–Ω–Ω–∞",
                "last_name": "–ê–ª–µ–∫—Å–µ–µ–≤–∞",
                "middle_name": "–ü–µ—Ç—Ä–æ–≤–Ω–∞",
                "identical_number": "test000004",
                "date_of_birth": date(1995, 2, 18),
                "dependency_type": DependencyType.F32,
                "notes": "–ß–µ—Ç–≤—ë—Ä—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–∫–∞"
            },
            {
                "first_name": "–ú–∞—Ä–∏—è",
                "last_name": "–ò–ª—å–∏–Ω–∞",
                "middle_name": "–ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞",
                "identical_number": "test000005",
                "date_of_birth": date(1988, 9, 5),
                "dependency_type": DependencyType.F20,
                "notes": "–ü—è—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–∫–∞"
            },
            {
                "first_name": "–ù–∏–∫–æ–ª–∞–π",
                "last_name": "–°–º–∏—Ä–Ω–æ–≤",
                "middle_name": "–ò–≥–æ—Ä–µ–≤–∏—á",
                "identical_number": "test000006",
                "date_of_birth": date(1982, 11, 12),
                "dependency_type": DependencyType.F17,
                "notes": "–®–µ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç"
            },
            {
                "first_name": "–ï–ª–µ–Ω–∞",
                "last_name": "–ö—É–∑–Ω–µ—Ü–æ–≤–∞",
                "middle_name": "–°–µ—Ä–≥–µ–µ–≤–Ω–∞",
                "identical_number": "test000007",
                "date_of_birth": date(1999, 6, 28),
                "dependency_type": DependencyType.F33,
                "notes": "–°–µ–¥—å–º–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–∫–∞"
            },
            {
                "first_name": "–î–º–∏—Ç—Ä–∏–π",
                "last_name": "–û—Ä–ª–æ–≤",
                "middle_name": "–û–ª–µ–≥–æ–≤–∏—á",
                "identical_number": "test000008",
                "date_of_birth": date(1987, 1, 8),
                "dependency_type": DependencyType.F15,
                "notes": "–í–æ—Å—å–º–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç"
            },
            {
                "first_name": "–û–∫—Å–∞–Ω–∞",
                "last_name": "–ú–∏—Ä–æ–Ω–æ–≤–∞",
                "middle_name": "–ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞",
                "identical_number": "test000009",
                "date_of_birth": date(1993, 12, 3),
                "dependency_type": DependencyType.F84,
                "notes": "–î–µ–≤—è—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–∫–∞"
            },
            {
                "first_name": "–ê–ª–µ–∫—Å–µ–π",
                "last_name": "–ü–∞–≤–ª–æ–≤",
                "middle_name": "–ê–Ω–¥—Ä–µ–µ–≤–∏—á",
                "identical_number": "test000010",
                "date_of_birth": date(1985, 8, 25),
                "dependency_type": DependencyType.F63,  # –õ—É–¥–æ–º–∞–Ω
                "notes": "–î–µ—Å—è—Ç—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç"
            },
        ]

        created_count = 0
        for resident_data in demo_residents:
            admission_days_ago = random.randint(10, 90)
            date_of_admission = today - timedelta(days=admission_days_ago)

            # üëá –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π
            if admission_days_ago < 20:
                status = ResidentStatus.NEWBIE
            elif admission_days_ago < 40:
                status = ResidentStatus.IN_PROGRESS
            else:
                status = ResidentStatus.ADVANCED

            resident, created = Resident.objects.get_or_create(
                identical_number=resident_data["identical_number"],
                defaults={
                    "first_name": resident_data["first_name"],
                    "last_name": resident_data["last_name"],
                    "middle_name": resident_data["middle_name"],
                    "date_of_birth": resident_data["date_of_birth"],
                    "date_of_admission": date_of_admission,
                    "dependency_type": resident_data["dependency_type"],
                    "notes": resident_data["notes"],
                    "status": status,
                }
            )
            if created:
                created_count += 1

        self.stdout.write(self.style.SUCCESS(f"–°–æ–∑–¥–∞–Ω–æ {created_count} —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤"))