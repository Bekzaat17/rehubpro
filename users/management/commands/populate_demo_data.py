from django.core.management.base import BaseCommand
from django.conf import settings
from django.contrib.auth import get_user_model
from dotenv import load_dotenv
import os

from references.models import (
    EmotionalState, PhysicalState, FamilyActivity,
    MrpActivity, Motivation, DailyDynamics,
    CharacterTrait, ResidentRole
)

from slugify import slugify


class Command(BaseCommand):
    help = "Populate initial reference and system data"

    def safe_slugify(self, name):
        slug = slugify(name)
        return slug if slug else f"slug-{abs(hash(name))}"

    def fill_if_missing_with_score(self, model, values_with_scores):
        for name, score in values_with_scores:
            slug = self.safe_slugify(name)
            model.objects.update_or_create(
                slug=slug,
                defaults={"name": name, "score": score}
            )

    def create_emotional_data(self):
        self.fill_if_missing_with_score(EmotionalState, [
            ('–†–æ–≤–Ω–æ–µ', 80),
            ('–¢—Ä–µ–≤–æ–∂–Ω–æ–µ', 40),
            ('–†–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ', 30),
            ('–ü–æ–¥–∞–≤–ª–µ–Ω–Ω–æ–µ', 20)
        ])
        self.fill_if_missing_with_score(PhysicalState, [
            ('–•–æ—Ä–æ—à–µ–µ', 90),
            ('–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ', 60),
            ('–ü–ª–æ—Ö–æ–µ', 30)
        ])
        self.fill_if_missing_with_score(FamilyActivity, [
            ('–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 90),
            ('–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 60),
            ('–ü–∞—Å—Å–∏–≤–Ω–æ—Å—Ç—å', 30),
            ('–û—Ç—Å—Ç—Ä–∞–Ω—ë–Ω–Ω–æ—Å—Ç—å', 10)
        ])
        self.fill_if_missing_with_score(MrpActivity, [
            ('–ê–∫—Ç–∏–≤–µ–Ω', 90),
            ('–£–º–µ—Ä–µ–Ω', 60),
            ('–ü–∞—Å—Å–∏–≤–µ–Ω', 30)
        ])
        self.fill_if_missing_with_score(Motivation, [
            ('–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è', 90),
            ('–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è', 50),
            ('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è', 20),
            ('–í—ã–Ω—É–∂–¥–µ–Ω–Ω–∞—è', 10)
        ])
        self.fill_if_missing_with_score(DailyDynamics, [
            ('–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è', 90),
            ('–°—Ç–∞–±–∏–ª—å–Ω–∞—è', 60),
            ('–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è', 30)
        ])

    def create_character_traits(self):
        traits = [
            ("–±–µ–∑–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "defect"),
            ("–±–µ–∑—É–º–∏–µ", "defect"),
            ("–±—Ä–µ–∑–≥–ª–∏–≤–æ—Å—Ç—å", "defect"),
            ("–≤–æ—Ä–æ–≤—Å—Ç–≤–æ", "defect"),
            ("–≤—Å–ø—ã–ª—å—á–∏–≤–æ—Å—Ç—å", "defect"),
            ("–≤—ã—Å–æ–∫–æ–º–µ—Ä–∏–µ", "defect"),
            ("–≥–æ—Ä–¥—ã–Ω—è", "defect"),
            ("–∂–∞–ª–æ—Å—Ç—å –∫ —Å–µ–±–µ", "defect"),
            ("–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å", "defect"),
            ("–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç—å", "defect"),
            ("–≥–∏–ø–µ—Ä–∫–æ–Ω—Ç—Ä–æ–ª—å", "defect"),
            ("–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è", "defect"),
            ("–∏–Ω—Ñ–∞–Ω—Ç–∏–ª—å–Ω–æ—Å—Ç—å", "defect"),
            ("–∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å", "defect"),
            ("–ª–µ–Ω—å", "defect"),
            ("–ª–∏—Ü–µ–º–µ—Ä–∏–µ", "defect"),
            ("–ª–æ–∂—å", "defect"),
            ("–Ω–µ—á–µ—Å—Ç–Ω–æ—Å—Ç—å", "defect"),
            ("–º–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω–æ—Å—Ç—å", "defect"),
            ("–º–Ω–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "defect"),
            ("–º—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "defect"),
            ("–Ω–∞–≥–ª–æ—Å—Ç—å", "defect"),
            ("–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "defect"),
            ("–Ω–µ–ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å", "defect"),
            ("–Ω–µ—Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å", "defect"),
            ("–Ω–µ—Ç–µ—Ä–ø–∏–º–æ—Å—Ç—å", "defect"),
            ("–Ω–µ—É–≤–∞–∂–µ–Ω–∏–µ", "defect"),
            ("–Ω–∏–∑–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "defect"),
            ("–æ–¥–µ—Ä–∂–∏–º–æ—Å—Ç—å", "defect"),
            ("–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ", "defect"),
            ("–ø—Ä–µ–¥—É–±–µ–∂–¥—ë–Ω–Ω–æ—Å—Ç—å", "defect"),
            ("–ø—Ä–µ–Ω–µ–±—Ä–µ–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "defect"),
            ("–ø—Ä–∏—Ç–≤–æ—Ä—Å—Ç–≤–æ", "defect"),
            ("–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤", "defect"),
            ("—Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "defect"),
            ("–æ–±–∏–¥–∞", "defect"),
            ("—Ä–∞—Å–ø—É—â–µ–Ω–Ω–æ—Å—Ç—å", "defect"),
            ("—Ä–µ–≤–Ω–æ—Å—Ç—å", "defect"),
            ("—Å–∞–º–æ–æ–ø—Ä–∞–≤–¥–∞–Ω–∏–µ", "defect"),
            ("—Å–∞–º–æ—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ", "defect"),
            ("—Å–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "defect"),
            ("—Å–∞—Ä–∫–∞–∑–º", "defect"),
            ("—Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å", "defect"),
            ("—Å—Ç–µ—Ä–µ–æ—Ç–∏–ø–Ω–æ—Å—Ç—å", "defect"),
            ("—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ", "defect"),
            ("—Å–∞–º–æ–æ–±–º–∞–Ω", "defect"),
            ("—Å–∞–º–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ", "defect"),
            ("—Ö–∏—Ç—Ä–æ—Å—Ç—å", "defect"),
            ("–∑–∞–Ω—É–¥—Å—Ç–≤–æ", "defect"),
            ("–∏–ª–ª—é–∑–æ—Ä–Ω–æ—Å—Ç—å", "defect"),
            ("—ç–≥–æ—Ü–µ–Ω—Ç—Ä–∏–∑–º", "defect"),
            ("—ç–≥–æ–∏–∑–º", "defect"),
            ("—Ö–∞–º—Å—Ç–≤–æ", "defect"),
            ("–≥–∏–ø–µ—Ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "defect"),
            ("–∑–∞–≤–∏—Å—Ç—å", "defect"),
            ("–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", "strength"),
            ("–±–ª–∞–≥–æ—Ä–∞–∑—É–º–∏–µ", "strength"),
            ("–≤–µ–∂–ª–∏–≤–æ—Å—Ç—å", "strength"),
            ("–≤–µ—Ä–∞", "strength"),
            ("–≤–µ—Ä–Ω–æ—Å—Ç—å", "strength"),
            ("–≤–µ—Å—ë–ª–æ—Å—Ç—å", "strength"),
            ("–≤–∑–∞–∏–º–æ–ø–æ–º–æ—â—å", "strength"),
            ("–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "strength"),
            ("–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", "strength"),
            ("–≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "strength"),
            ("–≥–∏–±–∫–æ—Å—Ç—å", "strength"),
            ("–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å", "strength"),
            ("–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å", "strength"),
            ("–∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω–æ—Å—Ç—å", "strength"),
            ("–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å", "strength"),
            ("–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "strength"),
            ("–∑–∞–±–æ—Ç–∞", "strength"),
            ("–∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å", "strength"),
            ("–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "strength"),
            ("–∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å", "strength"),
            ("–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "strength"),
            ("–∫—Ä–æ–ø–æ—Ç–ª–∏–≤–æ—Å—Ç—å", "strength"),
            ("–ª—é–±–æ–≤—å", "strength"),
            ("–º—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "strength"),
            ("–º—É–¥—Ä–æ—Å—Ç—å", "strength"),
            ("–º—É–∂–µ—Å—Ç–≤–æ", "strength"),
            ("–Ω–µ–ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å", "strength"),
            ("–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å", "strength"),
            ("–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "strength"),
            ("–æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å", "strength"),
            ("–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "strength"),
            ("–ø—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å", "strength"),
            ("—Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç—å", "strength"),
            ("—Å–º–µ–ª–æ—Å—Ç—å", "strength"),
            ("—Å–º–∏—Ä–µ–Ω–∏–µ", "strength"),
            ("—Å–æ–±—Ä–∞–Ω–Ω–æ—Å—Ç—å", "strength"),
            ("—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "strength"),
            ("—Ç–∞–ª–∞–Ω—Ç", "strength"),
            ("—Ç–µ—Ä–ø–∏–º–æ—Å—Ç—å", "strength"),
            ("—Ç—Ä—É–¥–æ–ª—é–±–∏–µ", "strength"),
            ("—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "strength"),
            ("—É–º", "strength"),
            ("—â–µ–¥—Ä–æ—Å—Ç—å", "strength"),
            ("—Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω–æ—Å—Ç—å", "strength"),
            ("—É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω–æ—Å—Ç—å", "strength"),
        ]

        for name, type_ in traits:
            slug = self.safe_slugify(f"{type_}-{name}")
            CharacterTrait.objects.update_or_create(
                slug=slug,
                defaults={"name": name, "type": type_}
            )

    def create_resident_roles(self):
        roles = [
            ("–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç", "president"),
            ("–ù–°–û", "nso"),
            ("–®–ö", "shk"),
            ("–•–î", "hd"),
            ("–í–∏–∑–æ—Ä", "vizor"),
            ("–£—á–µ—Ç–æ–≤–µ–¥", "uchetoved"),
            ("–ê–π–±–æ–ª–∏—Ç", "aibolit"),
            ("–ß–∞–π—Ö–∞–Ω—â–∏–∫", "chaikhanshchik"),
            ("–û–≥–æ—Ä–æ–¥–Ω–∏–∫", "ogorodnik"),
            ("–®–†–†", "shrr"),
            ("–§–æ—Ç–æ–∫–æ—Ä", "fotokor"),
            ("–ë–ü–ö", "bpk"),
            ("–§–∏–∑–æ—Ä–≥", "fizorg"),
            ("–î–∏—Å–∫–æ–º–µ–Ω", "diskomen"),
            ("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å", "bibliotekar"),
            ("–ú–∞—Å—Å–æ–≤–∏–∫ –ó–∞—Ç–µ–π–Ω–∏–∫", "massovik-zateynik"),
            ("–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã", "organizatory"),
            ("–•–†.–í–†.", "hr-vr"),
            ("–¶–≤–µ—Ç–æ–≤–æ–¥", "tsvetovod"),
            ("–ñ–∏–≤–æ—Ç–Ω–æ–≤–æ–¥", "zhivotnovod"),
        ]
        for name, slug in roles:
            ResidentRole.objects.update_or_create(
                slug=slug,
                defaults={"name": name}
            )

    def create_superuser_if_missing(self):
        User = get_user_model()
        if not User.objects.filter(is_superuser=True).exists():
            self.stdout.write("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

            username = os.getenv("SUPERUSER_USERNAME", "admin")
            email = os.getenv("SUPERUSER_EMAIL", "admin@example.com")
            password = os.getenv("SUPERUSER_PASSWORD", "admin")

            User.objects.create_superuser(
                username=username,
                email=email,
                password=password
            )

            self.stdout.write(self.style.SUCCESS(f"‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–∑–¥–∞–Ω."))
        else:
            self.stdout.write("‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")

    def handle(self, *args, **kwargs):
        self.stdout.write("üîÑ Populating initial reference data...")

        self.create_emotional_data()
        self.create_character_traits()
        self.create_resident_roles()
        self.create_superuser_if_missing()

        self.stdout.write(self.style.SUCCESS("‚úÖ All reference data loaded successfully."))