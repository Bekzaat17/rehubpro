# roles/management/commands/populate_demo_roles.py

from django.core.management.base import BaseCommand
from datetime import date, timedelta
import random

from residents.models import Resident
from references.models.resident_role import ResidentRole
from roles.models.resident_role_assignment import ResidentRoleAssignment


COMMENTS = [
    "–°–ø—Ä–∞–≤–∏–ª—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ",
    "–°–ø—Ä–∞–≤–∏–ª—Å—è —Ö–æ—Ä–æ—à–æ, –ø–æ–≤—ã—Å–∏—Ç—å",
    "–ù–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è, –ø–æ–Ω–∏–∑–∏—Ç—å",
    "–°–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–ª–∞–±–æ, –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Ç–æ–π –∂–µ —Ä–æ–ª–∏",
    "–û—Ç–ª–∏—á–Ω–æ –ø—Ä–æ—è–≤–∏–ª –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É",
    "–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å —Ç—Ä—É–¥–æ–º, –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π",
    "–•–æ—Ä–æ—à–∞—è –¥–∏–Ω–∞–º–∏–∫–∞, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å"
]


class Command(BaseCommand):
    help = "–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–æ–ª–µ–π: –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏, —É –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å —Ä–æ–ª–∏"

    def handle(self, *args, **kwargs):
        today = date.today()
        roles = list(ResidentRole.objects.order_by("id"))

        if not roles:
            self.stdout.write(self.style.ERROR("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–æ–ª–µ–π"))
            return

        residents = list(Resident.objects.all())
        if not residents:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è  –ù–µ—Ç —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π"))
            return

        # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–æ–ª–µ–π
        deleted_count, _ = ResidentRoleAssignment.objects.all().delete()
        self.stdout.write(self.style.WARNING(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {deleted_count} –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–æ–ª–µ–π"))

        # –û–ø—Ä–µ–¥–µ–ª–∏–º –¥–∞—Ç—ã —Å–º–µ–Ω—ã —Ä–æ–ª–µ–π ‚Äî –∫–∞–∂–¥—ã–µ 14 –¥–Ω–µ–π –æ—Ç —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π –¥–∞—Ç—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
        earliest_date = min(resident.date_of_admission for resident in residents)
        rotation_dates = []
        current = earliest_date

        while current <= today:
            rotation_dates.append(current)
            current += timedelta(days=14)

        for rotation_date in rotation_dates:
            random.shuffle(residents)  # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π —Ü–∏–∫–ª
            available_roles = roles[:]  # —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π

            for resident in residents:
                if resident.date_of_admission > rotation_date:
                    continue  # –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª

                # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏
                active_roles = resident.role_assignments.filter(unassigned_at__isnull=True)
                for ar in active_roles:
                    ar.unassigned_at = rotation_date
                    ar.save()

                # –û–ø—Ä–µ–¥–µ–ª–∏–º, —Å–∫–æ–ª—å–∫–æ —Ä–æ–ª–µ–π –¥–∞—Ç—å (1‚Äì2)
                num_roles = random.choice([1, 2])
                assigned_roles = []

                for _ in range(num_roles):
                    if not available_roles:
                        # –≤—Å–µ —Ä–æ–ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–∞–ª–∏—Å—å ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
                        available_roles = roles[:]
                        random.shuffle(available_roles)

                    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ä–æ–ª—å
                    role = available_roles.pop(0)
                    assigned_roles.append(role)

                # –ù–∞–∑–Ω–∞—á–∞–µ–º
                for role in assigned_roles:
                    ResidentRoleAssignment.objects.create(
                        resident=resident,
                        role=role,
                        assigned_at=rotation_date,
                        comment=random.choice(COMMENTS),
                    )

        self.stdout.write(self.style.SUCCESS("‚úÖ –†–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã: —É –∫–∞–∂–¥–æ–≥–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞."))