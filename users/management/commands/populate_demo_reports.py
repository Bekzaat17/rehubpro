# reports/management/commands/populate_demo_reports.py

from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.utils.timezone import localdate
from datetime import timedelta
import random

from residents.models import Resident
from references.models import (
    EmotionalState, PhysicalState, Motivation, DailyDynamics,
    CharacterTrait, FamilyActivity, MrpActivity
)
from roles.models.resident_role_assignment import ResidentRoleAssignment
from tasks.models.task_progress import TaskProgress
from tasks.models.assigned_task import AssignedTask
from reports.services.report_factory import ReportFactory

User = get_user_model()


class Command(BaseCommand):
    help = "–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-–æ—Ç—á—ë—Ç—ã ResidentReport –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Ç –¥–∞—Ç—ã –ø—Ä–∏—ë–º–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è."

    def handle(self, *args, **options):
        today = localdate()
        created_by = User.objects.order_by("?").first()

        residents = Resident.objects.all()
        if not residents.exists():
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è  –†–µ–∑–∏–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."))
            return

        # –ö—ç—à —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        emotional_states = list(EmotionalState.objects.all())
        physical_states = list(PhysicalState.objects.all())
        motivations = list(Motivation.objects.all())
        dynamics = list(DailyDynamics.objects.all())
        traits = list(CharacterTrait.objects.all())
        mrp_activities = list(MrpActivity.objects.all())
        family_activities = list(FamilyActivity.objects.all())

        for resident in residents:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç—á—ë—Ç—ã
            deleted_count, _ = resident.daily_reports.all().delete()
            self.stdout.write(self.style.WARNING(
                f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è {resident}"
            ))

            current_date = resident.date_of_admission

            while current_date <= today:
                # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ===
                data = {
                    "emotional_state": random.choice(emotional_states),
                    "physical_state": random.choice(physical_states),
                    "motivation": random.choice(motivations),
                    "daily_dynamics": random.choice(dynamics),
                    "positive_traits": random.sample(traits, k=random.randint(1, 2)),
                    "negative_traits": random.sample(traits, k=random.randint(0, 1)),
                    "mrp_activity": random.choice(mrp_activities),
                    "family_activity": random.choice(family_activities),
                    "comment": f"–ê–≤—Ç–æ–æ—Ç—á—ë—Ç –∑–∞ {current_date}",
                    "usts_info_shared": random.choice([True, False]),
                    "usts_format_followed": random.choice([True, False]),
                    "usts_comment": (
                        "–ë–µ–∑ –∑–∞–º–µ—á–∞–Ω–∏–π" if random.random() > 0.3 else "–ï—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –£–°–¢–°"
                    ),
                }

                task_comments = self.get_task_comments(resident, current_date)
                role_statuses = self.get_role_statuses(resident, current_date)

                try:
                    factory = ReportFactory(resident, created_by, date=current_date, skip_validation=True)
                    factory.create_or_update_report(data, task_comments, role_statuses)
                    self.stdout.write(self.style.SUCCESS(
                        f"‚úîÔ∏è  –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {resident} ‚Üí {current_date}"
                    ))
                except Exception as e:
                    self.stdout.write(self.style.WARNING(
                        f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {resident} –Ω–∞ {current_date}: {e}"
                    ))

                current_date += timedelta(days=1)

        self.stdout.write(self.style.SUCCESS("‚úÖ –í—Å–µ –æ—Ç—á—ë—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã."))

    def get_task_comments(self, resident, date):
        latest_progress = (
            TaskProgress.objects
            .filter(assigned_task__resident=resident, created_at__date__lte=date)
            .order_by("-created_at")
            .first()
        )

        if not latest_progress:
            return {}

        comment = latest_progress.comment or ""
        if not comment:
            return {}

        return {
            latest_progress.assigned_task.task.id: comment
        }

    def get_role_statuses(self, resident, date):
        statuses = {}
        role_assignments = ResidentRoleAssignment.objects.filter(
            resident=resident,
            assigned_at__lte=date
        ).filter(
            unassigned_at__isnull=True
        ) | ResidentRoleAssignment.objects.filter(
            resident=resident,
            assigned_at__lte=date,
            unassigned_at__gte=date
        )
        for role in role_assignments:
            statuses[str(role.id)] = random.choice(["responsible", "irresponsible"])
        return statuses